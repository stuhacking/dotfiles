;;;; Emacs Init File                                        -*- emacs-lisp -*-
(defconst emacs-start-time (current-time))


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
(package-initialize)


(defun office-laptop-p ()
  "Return t if the current machine is a work laptop."
  (string-equal "shacking-mac" (system-name)))


;;; Global packages.
(require 'git-gutter)
(global-git-gutter-mode t)


;;; Global IDO Search/Open.
(setq ido-create-new-buffer 'always)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)


;;; Make it look nice.
(set-face-attribute 'default nil
                    :family "Fantasque Sans Mono"
                    :height 160)

(setq solarized-distinct-doc-face t
      solarized-distinct-fringe-background nil
      solarized-high-contrast-mode-line t
      solarized-scale-org-headlines nil
      solarized-scale-outline-headlines nil
      solarized-use-less-bold t
      solarized-use-variable-pitch nil)

;; Higher contrast dark theme in terminal emacs.
(if (display-graphic-p)
    (load-theme 'solarized-dark t)
  (load-theme 'wheatgrass t))

;; Programming modes standard preferences:
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook
	  (lambda ()
            (rainbow-delimiters-mode +1)
            (projectile-mode +1)
            (column-enforce-n 80)))


(add-hook 'projectile-mode-hook
	  (lambda ()
	    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)))


;;; Org-mode Customization.
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-default-notes-file "~/.emacs.d/notes.org")
(setq org-capture-templates
      '(("n" "Note" entry (file+headline "~/.emacs.d/notes.org" "Notes")
         "* %U %?\n\n %i\n %a")
        ("v" "Vacation" entry (file+headline "~/.emacs.d/calendar.org" "Vacation")
         "** %? (,)\n   %t--%t")))


;;; SLIME Customization.
(load (expand-file-name "~/dev/system/lisp/ql/slime-helper.el"))
(setq inferior-lisp-program "ccl -K utf-8")
(setq slime-compile-file-options
      '(:fasl-directory "~/dev/tmp/slime-fasl/"))

(defun slime-description-fontify ()
  "Fontify sections of SLIME description."
  (with-current-buffer "*slime-description*"
    (highlight-regexp
     (concat "^Function:\\|"
             "^Macro-function:\\|"
             "^Its associated name.+?) is\\|"
             "^The .+'s arguments are:\\|"
             "^Documentation:$\\|"
             "^Its.+\\(is\\|are\\):\\|"
             "^On.+it was compiled from:$")
     'hi-green-b)))

(defadvice slime-show-description (after slime-description-fontify activate)
  "Fontify sections of SLIME Description."
  (slime-description-fontify))

(eval-after-load "slime"
  '(progn
     (slime-setup '(slime-fancy
                    slime-scratch
                    slime-banner
                    slime-autodoc))))


;;; Global key bindings.
(global-set-key (kbd "<f12>") #'magit-status)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(backup-directory-alist (quote (("\".\"" . "\"~/.emacs.d/bak/\""))))
 '(c-basic-offset 4)
 '(c-default-style
   (quote
    ((c-mode . "k&r")
     (java-mode . "java")
     (awk-mode . "awk")
     (other . "gnu"))))
 '(c-doc-comment-style
   (quote
    ((c-mode . javadoc)
     (c++-mode . javadoc)
     (java-mode . javadoc))))
 '(column-number-indicator-zero-based nil)
 '(column-number-mode t)
 '(custom-safe-themes
   (quote
    ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" default)))
 '(exec-path
   (quote
    ("~/bin" "/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin" "/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14" "/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14" "/Applications/Emacs.app/Contents/MacOS/libexec" "/Applications/Emacs.app/Contents/MacOS/bin" "/Library/TeX/texbin" nil)))
 '(fill-column 72)
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(global-visual-line-mode t)
 '(indent-tabs-mode nil)
 '(indicate-buffer-boundaries (quote left))
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(ispell-local-dictionary-alist
   (quote
    (("English" "\"[A-Za-z]\"" "\"[^A-Za-z]\"" "\"[']\"" nil
      ("\"-B\"" "\"-d\"" "\"english\"" "\"--dict-dir\"" "\"/Library/Application Support/cocoAspell/aspell6-en-6.0.0\"")
      "~tex" iso-8859-1))))
 '(ispell-program-name "aspell")
 '(mouse-avoidance-mode (quote animate) nil (avoid))
 '(org-agenda-files
   (quote
    ("~/.emacs.d/calendar.org" "~/dev/gamedev/crpg/plan.org")))
 '(org-babel-load-languages
   (quote
    ((lisp . t)
     (emacs-lisp . t)
     (js . t)
     (C . t)
     (perl . t)
     (shell . t))))
 '(org-confirm-babel-evaluate t)
 '(org-default-notes-file "~/.emacs.d/notes")
 '(org-directory "~/.emacs.d/orgfiles/")
 '(org-html-doctype "html5")
 '(org-log-done (quote time))
 '(org-pretty-entities nil)
 '(org-src-tab-acts-natively t)
 '(org-startup-folded (quote content))
 '(package-selected-packages
   (quote
    (powerline c-eldoc org-bullets darkroom paredit column-enforce-mode rust-mode rustic cider htmlize clang-format rainbow-mode rainbow-delimiters magit projectile-speedbar projectile glsl-mode solarized-theme)))
 '(projectile-tags-backend (quote auto))
 '(projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s \"%s\"")
 '(require-final-newline t)
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(slime-repl-history-remove-duplicates t)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(visual-line-fringe-indicators (quote (left-curly-arrow nil))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:background "DarkSlateGrey" :foreground "#93a1a1"))))
 '(show-paren-match ((t (:weight bold)))))
(custom-theme-set-faces
 'solarized-dark
 '(fringe ((t (:background "DarkSlateGrey" :foreground "93a1a1"))))
 '(show-paren-match ((t (:weight bold :inverse-video t))))
 '(org-block ((t (:background "#002930"))))
 '(font-lock-doc-face ((t (:foreground nil :inherit font-lock-comment-face)))))
