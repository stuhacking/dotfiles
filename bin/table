#! /usr/bin/env python
# Table --- Turn ASCII tables into other types of
# tables (e.g. html / wiki)
# Created: 19-Sep-2012
import sys
import re

#
# ABSTRACT FORMATTER
#
# Define your own table formatting by extending and implementing
# the row and header lines
# TODO: Cell level formatting (e.g. bold/colored)
# TODO: More types of table?
# TODO: Header detection using, e.g. ==== instead of ------ in the input
#
# A Formatter is a class which parses a table_data structure of the form
#  [ 'separator' | 'end' | [String] ]
# and transforms it into an output format defined by subclassing the
# abstract class.
# 
# Subclasses can override certain properties and methods to affect
# the output:
#  - self.decorators: specify text level formatting for bold/italic/underlined
#                     text. Assumes standard notation in input, i.e. *bold*,
#                     /italic/, _underline_
#  - preamble: Adds any text which should precede the set of rows.
#  - postamble: Adds any text which should succeed the set of rows.
#  - row: Defines the structure of a row given the input type [String]
#  - header: Defines the structure of a header row, if this differs from
#            a standard row.
class Formatter:
    def __init__(self):
        self.decorators = {
            'bold' : ('', ''),
            'italic' : ('', ''),
            'underline' : ('', '')
            }
    def preamble(self):
        return ""
    def postamble(self):
        return ""
    def row(self, line):
        return ""
    def header(self, line):
        return ""

    def decorate (self, text):
        output = re.sub(r'\/(.+)\/', self.decorators['italic'][0] + r'\1' + self.decorators['italic'][1], text)
        output = re.sub(r'\*(.+)\*', self.decorators['bold'][0] + r'\1' + self.decorators['bold'][1], output)
        output = re.sub(r'\_(.+)\_', self.decorators['underline'][0] + r'\1' + self.decorators['underline'][1], output)
        return output

    def convert(self, table_data):
        table = self.preamble()
        columns = None
        first = True
        for line in table_data:
            if line is "end":
                break
            elif line is not "separator":
                if columns is None:
                    columns = line[:]
                else:
                    for col in range(len(line)):
                        columns[col] += " " + line[col]
            else:
                if columns is not None:
                    row_data = [self.decorate(x) for x in columns]
                    if first:
                        table += self.header(row_data)
                    else:
                        table += self.row(row_data)
                    columns = None
                    first = False
        table += self.postamble()
        return table
    def __call__(self, table_data):
        return self.convert(table_data)

#
# HTML FORMATTER
#
class html_table(Formatter):
    def __init__(self):
        self.decorators = {
            'bold' : ('<strong>', '</strong>'),
            'italic' : ('<em>', '</em>'),
            'underline' : ('<u>', '</u>')
            }
    def preamble(self):
        return "<table>\n"
    def postamble(self):
        return "</table>\n"

    def row(self, line):
        return "<tr>\n" + "".join(["<td>" + x + "</td>\n" for x in line]) + "<tr>\n"

    def header(self, line):
        return "<thead><tr>\n" + "".join(["<th>" + x + "</th>\n" for x in line]) + "<tr></thead>\n"



#
# WIKI FORMATTER
#
# Confluence wiki syntax
class wiki_table(Formatter):
    def __init__(self):
        self.decorators = {
            'bold' : ('*', '*'),
            'italic' : ('_', '_'),
            'underline' : ('+', '+')
            }
    def row(self, line):
        return "".join(["| " + x + " " for x in line]) + "|\n"

    def header(self, line):
        return "".join(["|| " + x + " " for x in line]) + "||\n"



# Hook up converters
known_types = {
    "html" : html_table,
    "htm" : html_table,
    "wiki" : wiki_table
}

# Parse a table represented by ASCII (e.g. an Emacs org-table).
def parse_ascii(input_file):
    result = []
    with open(input_file, "r") as f:
        for line in f:
            # Lines with content would contain '|' column separators
            line_data = [x.strip(" ") for x in line[:-1].split("|") if x]
            detect_sep = "".join(line_data);
            if len(line_data) == 0:
                result.append("end")
            elif detect_sep.count('-') > 0 or detect_sep.count('=') > 0:
                result.append("separator")
            else:
                result.append(line_data)
    return result

# Parse a table represented by CSV data.
# (Assumes first line is a header.)
def parse_csv(input_file):
    result = []
    with open(input_file, "r") as f:
        for line in f:
            line_data = [x.strip(" ") for x in line[:-1].split(",") if x]
            if len(line_data) == 0:
                result.append("end")
            else:
                result.append(line_data)
                result.append("separator")
    print result
    return result

# Display Usage string and exit.
def usage():
    print "usage: table [-o <output_filename>] [-t <output_type>] input_filename"
    sys.exit(1)

def main():
    input_file = None    # None is not supported
    output_file = None   # None will write to stdout
    table_type = None    # None is not supported

    args = sys.argv[1:]
    
    if (len(args) <= 0):
        usage()
        
    # Parse arguments - supported are:
    #  -h --help : Display Usage string
    #  -o --output : Specifiy output file (default, stdout)
    #  -t --type   : Specify output format, e.g. html, wiki
    #                If not specified, will attempt to guess from
    #                output file extension
    #  input_file  : final argument; source data file
    while (len(args) > 0):
        arg = args[0]
        args = args[1:]
        # Help Flag
        if re.match('^--?h(elp)?$', arg):
            usage()
        # Output file flag
        elif re.match('^--?o(utput)?$', arg):
            output_file = args[0]
            args = args[1:]
        # Type Flag
        elif re.match('^--?t(ype)?$', arg):
            table_type = args[0]
            args = args[1:]
        # Finally, Input file flag
        else:
            input_file = arg

    # Ensure that we know how to make the desired output
    # a specified type will override guessing the type.
    # We can't guess the type for stdout, so fail if table
    # type is none and output is stdout.
    if (table_type not in known_types):
        if (table_type is not None):
            print "Unsupported type: ", table_type
            sys.exit(1)
        
        if (output_file is None):
            print "Unable to guess output type for stdout."
            sys.exit(1)

        extension = output_file.split(".")[-1]
        if (extension not in known_types):
            print "Output type is not supported: ", extension
            sys.exit(1)

        table_type = extension
    
    # Attempt to parse data from input file. If the extension
    # of the input_file is .csv then import the table data using
    # a csv parser. Otherwise use the ASCII parser.
    table_data = ["end"] # empty table
    input_type = input_file.split(".")[-1]
    print input_type
    if (input_type == "csv"):
        table_data = parse_csv(input_file)
    else:
        table_data = parse(input_file)

    # Perform the table conversion and write it to the
    # output file.
    formatter = known_types[table_type]()
    output = formatter(table_data)
    if output_file is None:
        print output
    else:
        with open(output_file, "w") as out:
            out.write(output)

if __name__ == '__main__':
    main()
