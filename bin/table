#! /usr/bin/env python
# Table --- Turn ASCII tables into other types of
# tables (e.g. html / wiki)
# Created: 19-Sep-2012
import sys
import re

#
# ABSTRACT FORMATTER
#
# Define your own table formatting by extending and implementing
# the row and header lines
# TODO: Cell level formatting (e.g. bold/colored)
# TODO: More types of table?
# TODO: Header detection using, e.g. ==== instead of ------ in the input
class Formatter:
    def preamble(self):
        return ""
    def postamble(self):
        return ""
    def row(self, line):
        return ""
    def header(self, line):
        return ""
    def convert(self, table_data):
        table = self.preamble()
        columns = None
        first = True
        for line in table_data:
            if line is not "separator":
                if columns is None:
                    columns = line[:]
                else:
                    for col in range(len(line)):
                        columns[col] += " " + line[col]
            else:
                if first:
                    table += self.header(columns)
                else:
                    table += self.row(columns)
                columns = None
                first = False
        table += self.postamble()
        return table
    def __call__(self, table_data):
        return self.convert(table_data)

#
# HTML FORMATTER
#
class html_table(Formatter):

    def preamble(self):
        return "<table>\n"
    def postamble(self):
        return "</table>\n"

    def row(self, line):
        return "<tr>\n" + "".join(["<td>" + x + "</td>\n" for x in line]) + "<tr>\n"

    def header(self, line):
        return "<thead><tr>\n" + "".join(["<th>" + x + "</th>\n" for x in line]) + "<tr></thead>\n"


#
# WIKI FORMATTER
#
# Confluence wiki syntax
class wiki_table(Formatter):
    def row(self, line):
        return "".join(["| " + x + " " for x in line]) + "|\n"

    def header(self, line):
        return "".join(["|| " + x + " " for x in line]) + "||\n"



# Hook up converters
known_types = {
    "html" : html_table,
    "htm" : html_table,
    "wiki" : wiki_table
}

# Very simply parse an ascii table into lines
def parse(input_file):
    result = []
    with open(input_file, "r") as f:
        for line in f:
            line_data = [x.strip(" ") for x in line[:-1].split("|") if x]
            if len(line_data) is 1:
                result.append("separator")
            else:
                result.append(line_data)
    return result

def usage():
    print "usage: table [-o <output_filename>] [-t <output_type>] input_filename"
    sys.exit(1)

def main():
    input_file = None    # None is not supported
    output_file = None   # None will write to stdout
    table_type = None    # None is not supported

    args = sys.argv[1:]
    
    if (len(args) <= 0):
        usage()
        
    while (len(args) > 0):
        arg = args[0]
        args = args[1:]
        # Help Flag
        if re.match('^--?h(elp)?$', arg):
            usage()
        # Output file flag
        elif re.match('^--?o(utput)?$', arg):
            output_file = args[0]
            args = args[1:]
        # Type Flag
        elif re.match('^--?t(ype)?$', arg):
            table_type = args[0]
            args = args[1:]
        # Finally, Input file flag
        else:
            input_file = arg

    # Attempt to guess table type if None
    if (table_type not in known_types):
        if (table_type is not None):
            print "Unsupported type: ", table_type
            sys.exit(1)
        
        if (output_file is None):
            print "Unable to guess output type for stdout."
            sys.exit(1)

        extension = output_file.split(".")[-1]
        if (extension not in known_types):
            print "Output type is not supported: ", extension
            sys.exit(1)

        table_type = extension

    formatter = known_types[table_type]()
    output = formatter(parse(input_file))
    if output_file is None:
        print output
    else:
        with open(output_file, "w") as out:
            out.write(output)

if __name__ == '__main__':
    main()
